{
  "Description": "Creates an Amazon Kinesis Stream to Amazon Neptune example",
  "Parameters": {
    "DbInstanceType": {
      "Description": "Neptune DB instance type",
      "Type": "String",
      "Default": "db.r4.xlarge",
      "AllowedValues": [
        "db.r4.large",
        "db.r4.xlarge",
        "db.r4.2xlarge",
        "db.r4.4xlarge",
        "db.r4.8xlarge",
        "db.r5.large",
        "db.r5.xlarge",
        "db.r5.2xlarge",
        "db.r5.4xlarge",
        "db.r5.12xlarge"
      ],
      "ConstraintDescription": "Must be a valid Neptune instance type"
    },
    "EC2ClientInstanceType": {
      "Description": "EC2 workload driver instance type",
      "Type": "String",
      "Default": "m5.large",
      "AllowedValues": [
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type"
    },
    "EC2KeyPairName": {
      "Description": "EC2 Keypair for workload driver instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair in same region",
      "MinLength": 0
    },
    "ShardCount": {
      "Description": "Number of shards in the Kinesis Data Stream",
      "Type": "Number",
      "Default": 2,
      "MinValue": 1,
      "MaxValue": 500,
      "ConstraintDescription": "Must be an integer between 1 and 500 (inclusive)"
    },
    "DriverBatchSize": {
      "Description": "Number of edges to create with each invocation of the workload driver",
      "Type": "Number",
      "Default": 100,
      "MinValue": 1,
      "MaxValue": 3000,
      "ConstraintDescription": "Must be an integer between 1 and 3000 (inclusive)"
    },
    "BatchReadSize": {
      "Description": "Batch size of reads from Kinesis Data Stream by Lambda function that writes to Neptune",
      "Type": "Number",
      "Default": 1000,
      "MinValue": 1,
      "MaxValue": 10000,
      "ConstraintDescription": "Must be an integer between 1 and 10000 (inclusive)"
    },
    "BatchWriteSize": {
      "Description": "Batch size of writes to Neptune from Lambda function",
      "Type": "Number",
      "Default": 100,
      "MinValue": 1,
      "MaxValue": 10000,
      "ConstraintDescription": "Must be an integer between 1 and 10000 (inclusive)"
    },
    "DriverPeriod": {
      "Description": "Delay (in milliseconds) between invocations of the workload driver",
      "Type": "Number",
      "Default": 100,
      "MinValue": 1,
      "MaxValue": 1000,
      "ConstraintDescription": "Must be an integer between 1 and 1000 (inclusive)"
    },
    "ConditionalCreate": {
      "Description": "Insert edges using conditional coalesce() idiom (true) or direct writes (false)",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "VertexFileS3Location": {
      "Description": "S3 path to vertex file(s)",
      "Type": "String",
      "AllowedPattern": "^s3://.*"
    },
    "EdgeFileS3Location": {
      "Description": "S3 path to edge file (must be named follows.csv.gz)",
      "Type": "String",
      "AllowedPattern": "^s3://.*follows\\.csv\\.gz$"
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Your Credentials"
          },
          "Parameters": [
            "EC2KeyPairName"
          ]
        },
        {
          "Label": {
            "default": "Neptune Database"
          },
          "Parameters": [
            "DbInstanceType"
          ]
        },
        {
          "Label": {
            "default": "Kinesis Stream and Lambda Function"
          },
          "Parameters": [
            "ShardCount",
            "BatchReadSize",
            "BatchWriteSize",
            "ConditionalCreate"
          ]
        },
        {
          "Label": {
            "default": "Workload Driver"
          },
          "Parameters": [
            "EC2ClientInstanceType",
            "DriverPeriod",
            "DriverBatchSize"
          ]
        },
        {
          "Label": {
            "default": "Test Data"
          },
          "Parameters": [
            "VertexFileS3Location",
            "EdgeFileS3Location"
          ]
        }
      ]
    }
  },
  "Resources": {
    "NeptuneCluster": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/aws-neptune-customer-samples/v2/cloudformation-templates/neptune-base-stack.json",
        "Parameters": {
          "NeptuneQueryTimeout": "300000",
          "DBReplicaIdentifierSuffix": "replica",
          "DbInstanceType": {
            "Ref": "DbInstanceType"
          }
        },
        "TimeoutInMinutes": "60"
      }
    },
    "SageMakerNeptune": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/aws-neptune-customer-samples/neptune-sagemaker/cloudformation-templates/neptune-sagemaker/neptune-sagemaker-nested-stack.json",
        "Parameters": {
          "NeptuneClusterEndpoint": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.DBClusterEndpoint"
            ]
          },
          "NeptuneReaderEndpoint": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.DBClusterReadEndpoint"
            ]
          },
          "NeptuneClusterPort": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.DBClusterPort"
            ]
          },
          "NeptuneClusterVpc": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.VPC"
            ]
          },
          "NeptuneClusterSubnetId": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.PublicSubnet1"
            ]
          },
          "NeptuneLoadFromS3RoleArn": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.NeptuneLoadFromS3IAMRoleArn"
            ]
          },
          "NeptuneClientSecurityGroup": "",
          "NeptuneClusterResourceId": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.DBClusterResourceId"
            ]
          },
          "NotebookContentS3Locations": "s3://aws-neptune-customer-samples/neptune-sagemaker/notebooks|stream-2-neptune/*",
          "StartupScript": {
            "Fn::Join": [
              "",
              [
                "echo 'export PERCENT_ERRORS=0' >> /home/ec2-user/.bashrc\n",
                "echo 'export SHARD_COUNT=",
                {
                  "Ref": "ShardCount"
                },
                "' >> /home/ec2-user/.bashrc\n",
                "echo 'export BATCH_PUBLISH_SIZE=",
                {
                  "Ref": "DriverBatchSize"
                },
                "' >> /home/ec2-user/.bashrc\n",
                "echo 'export BATCH_READ_SIZE=",
                {
                  "Ref": "BatchReadSize"
                },
                "' >> /home/ec2-user/.bashrc\n",
                "echo 'export BATCH_WRITE_SIZE=",
                {
                  "Ref": "BatchWriteSize"
                },
                "' >> /home/ec2-user/.bashrc\n",
                "echo 'export PERIOD=",
                {
                  "Ref": "DriverPeriod"
                },
                "' >> /home/ec2-user/.bashrc\n",
                "echo 'export CONDITIONAL_CREATE=",
                {
                  "Ref": "ConditionalCreate"
                },
                "' >> /home/ec2-user/.bashrc\n",
                "echo 'export VERTEX_FILE_S3_LOCATION=",
                {
                  "Ref": "VertexFileS3Location"
                },
                "' >> /home/ec2-user/.bashrc\n"
              ]
            ]
          }
        },
        "TimeoutInMinutes": "60"
      }
    },
    "AddIamRoleToNeptuneCluster": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/aws-neptune-customer-samples/neptune-sagemaker/cloudformation-templates/common/add-iam-role-to-neptune.json",
        "Parameters": {
          "DBClusterId": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.DBClusterId"
            ]
          },
          "NeptuneLoadFromS3IAMRoleArn": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.NeptuneLoadFromS3IAMRoleArn"
            ]
          }
        },
        "TimeoutInMinutes": "60"
      }
    },
    "KinesisStreamAndLambdaWriters": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/aws-neptune-customer-samples/neptune-sagemaker/cloudformation-templates/stream-2-neptune/stream-and-lambda-writers.json",
        "Parameters": {
          "NeptuneClusterEndpoint": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.DBClusterEndpoint"
            ]
          },
          "NeptuneClusterPort": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.DBClusterPort"
            ]
          },
          "VPC": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.VPC"
            ]
          },
          "NeptuneClusterSubnet1": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.PublicSubnet1"
            ]
          },
          "NeptuneClusterSubnet2": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.PublicSubnet2"
            ]
          },
          "NeptuneClusterSubnet3": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.PublicSubnet3"
            ]
          },
          "NeptuneClientSecurityGroup": "",
          "PercentErrors": 0,
          "ShardCount": {
            "Ref": "ShardCount"
          },
          "BatchReadSize": {
            "Ref": "BatchReadSize"
          },
          "BatchWriteSize": {
            "Ref": "BatchWriteSize"
          },
          "ConditionalCreate": {
            "Ref": "ConditionalCreate"
          },
          "Wait": "false",
          "NeptuneClusterID": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.DBClusterId"
            ]
          }
        },
        "TimeoutInMinutes": "60"
      }
    },
    "EC2Workload": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/aws-neptune-customer-samples/neptune-sagemaker/cloudformation-templates/stream-2-neptune/ec2-workload.json",
        "Parameters": {
          "EC2SSHKeyPairName": {
            "Ref": "EC2KeyPairName"
          },
          "EC2ClientInstanceType": {
            "Ref": "EC2ClientInstanceType"
          },
          "VPC": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.VPC"
            ]
          },
          "Subnet": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.PublicSubnet1"
            ]
          },
          "StreamName": {
            "Fn::GetAtt": [
              "KinesisStreamAndLambdaWriters",
              "Outputs.StreamName"
            ]
          },
          "DriverBatchSize": {
            "Ref": "DriverBatchSize"
          },
          "DriverPeriod": {
            "Ref": "DriverPeriod"
          },
          "EdgeFileS3Location": {
            "Ref": "EdgeFileS3Location"
          }
        },
        "TimeoutInMinutes": "60"
      }
    },
    "Dashboard": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/aws-neptune-customer-samples/neptune-sagemaker/cloudformation-templates/stream-2-neptune/dashboard.json",
        "Parameters": {
          "NeptuneClusterID": {
            "Fn::GetAtt": [
              "NeptuneCluster",
              "Outputs.DBClusterId"
            ]
          },
          "LambdaFunction": {
            "Fn::GetAtt": [
              "KinesisStreamAndLambdaWriters",
              "Outputs.LambdaName"
            ]
          }
        },
        "TimeoutInMinutes": "15"
      }
    }
  },
  "Outputs": {
    "SageMakerNotebook": {
      "Description": "SageMaker Jupyter notebook URI",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::Select": [
                1,
                {
                  "Fn::Split": [
                    "/",
                    {
                      "Fn::GetAtt": [
                        "SageMakerNeptune",
                        "Outputs.NeptuneNotebookInstanceId"
                      ]
                    }
                  ]
                }
              ]
            },
            ".notebook.",
            {
              "Ref": "AWS::Region"
            },
            ".sagemaker.aws/tree/Neptune/stream-2-neptune"
          ]
        ]
      }
    },
    "Dashboard": {
      "Description": "CloudWatch metrics dashboard URI",
      "Value": {
        "Fn::GetAtt": [
          "Dashboard",
          "Outputs.DashboardURI"
        ]
      }
    },
    "NeptuneClusterEndpoint": {
      "Description": "Cluster endpoint for Neptune cluster",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneCluster",
          "Outputs.DBClusterEndpoint"
        ]
      }
    },
    "NeptuneReaderEndpoint": {
      "Description": "Reader endpoint for Neptune cluster",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneCluster",
          "Outputs.DBClusterReadEndpoint"
        ]
      }
    },
    "WorkloadDriverCommand": {
      "Description": "Command to run the workload load driver",
      "Value": {
        "Fn::Join": [
          "",
          [
            "java -jar social-app-driver.jar neptune-cluster-write-stream ",
            {
              "Ref": "AWS::Region"
            },
            " 10"
          ]
        ]
      }
    },
    "EC2WorkloadDriverInstance": {
      "Description": "SSH command for accessing EC2 workload instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Workload",
          "Outputs.SSHAccess"
        ]
      }
    }
  }
}